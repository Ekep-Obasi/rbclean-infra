openapi: 3.0.0
servers:
  - url: https://api.rbclean.xyz
    description: API server
info:
  description: |
    SImple laundry service REST api
  version: 1.0.0
  title: RB CLEAN

security:
  - {}

paths:
  /auth/register:
    post:
      tags:
        - Auth # see read me for all the list of tags
      description: Register new user
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                schema:
                  $ref: '#/components/schemas/User'  
      responses:
        '201':
          description: User registered succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request

  /auth/login:
    post:
      tags:
        - Auth
      description: Login a user
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                schema:
                  email:
                    description: email of the user
                    type: string
                    format: email
                    example: john.smith@example.com
                  password:
                    description: the user's password
                    type: string 
      responses:
        '200':
          description: User logged in succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request

  /auth/forgot-password:
    post:
      tags:
        - Auth
      description: Request a password reset token/link
      operationId: forgotPassword
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                schema:
                  email:
                    description: email of the user
                    type: string
                    format: email
                    example: john.smith@example.com
      responses:
        '202':
          description: Reset password token sent
        '400':
          description: Bad request

  /auth/reset-password:
    post:
      tags:
        - Auth
      description: Reset the password of a user
      operationId: resetPassword
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                schema:
                  nonce:
                    description: authorization token
                    type: string
                  password:
                    description: the user's new password
                    type: string 
      responses:
        '301':
          description: Redirect to login page
        '400':
          description: Bad request

  /auth/verify-email:
    post:
      tags:
        - Auth
      description: Verify email address
      operationId: verifyEmail
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                schema:
                  nonce:
                    description: authorization token
                    type: string
      responses:
        '200':
          description: verified
        '400':
          description: Bad request

  /auth/2fa:
    post:
      tags:
        - Auth
      description: Multifactor authentication
      operationId: 2fa
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                schema:
                  shortCode:
                    description: 6 digit alfanumeric 2fa code
                    type: string
      responses:
        '200':
          description: verified
        '401':
          description: Unauthorized

#
# USER SERVICES PATHS STARTS HERE
#

  /profile:
    get:
      tags:
        - User
      summary: Get user profile
      operationId: getUserProfile
      responses:
        "200":
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
    put:
      tags:
        - User
      summary: Update user profile
      operationId: updateUserProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          description: Profile updated
        "400":
          description: Bad request
        "401":
          description: Unauthorized
    delete:
      tags:
        - User
      summary: Delete user account
      operationId: deleteUserAccount
      responses:
        "204":
          description: Account deleted
        "401":
          description: Unauthorized
#
# REPORTS SERVICES PATHS STARTS HERE
#

  /reports:
    get:
      summary: Get all reports
      tags:
        - reports
      parameters:
        - in: query
          name: startDate
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          schema:
            type: string
            format: date
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, completed, cancelled]
      responses:
        '200':
          description: Successful response
          content:
            application/json:    
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'
        '400':
          description: Bad request
    post:
      summary: Create a new report
      tags:
        - reports
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportInput'
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        '400':
          description: Bad request

  /reports/{id}:
    get:
      summary: Get a report by ID
      tags:
        - reports
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        '404':
          description: Report not found
    put:
      summary: Update a report
      tags:
        - reports
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportInput'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        '404':
          description: Report not found
        '400':
          description: Bad request

components:
  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    User:
      description: A user of our system
      type: object
      properties:
        email:
          type: string
          required: false
        password:
          type: string
          required: false
        name:
          type: string
        role:
          type: string
          enum:
            - CLIENT
            - ADMIN
        joinedAt:
          type: date-time
        phoneNumber:
          type: string 
        pictureUrl:
          type: string
        address:
          type: string
        sex:
          type: string 
          enum: [Male,Female]
          required: false

    UserUpdate:
      type: object
      properties:
        name:
          type: string
          required: false
        phoneNumber:
          type: string
          required: false
        pictureUrl:
          type: string
          required: false
        address:
          type: string
          required: false
        sex:
          type: string 
          enum: [Male,Female]
          required: false
#
# REPORTS SCHEMAS
#
    Report:
      type: object
      properties:
        id:
          type: string
        customerName:
          type: string
        customerEmail:
          type: string
        createdAt:
          type: string
          format: date-time
        status:
          type: string
          enum: [pending, completed, cancelled]
        type:
          type: string
          enum: [pickup, delivery, wash_and_fold]
        items:
          type: array
          items:
            $ref: '#/components/schemas/ReportItem'
        total:
          type: number
          format: float
    ReportItem:
      type: object
      properties:
        name:
          type: string
        quantity:
          type: integer
        price:
          type: number
          format: float
    ReportInput:
      type: object
      properties:
        customerName:
          type: string
        customerEmail:
          type: string
        type:
          type: string
          enum: [pickup, delivery, wash_and_fold]
        items:
          type: array
          items:
            $ref: '#/components/schemas/ReportItem'